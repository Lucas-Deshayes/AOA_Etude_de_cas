/home/lucas/AOA/AOA_Etude_de_cas/driver_mesure.c: 15 - 93
--------------------------------------------------------------------------------

15:    for (i=0; i<n; i++) {
16:       for (j=0; j<n; j++) {
17:          a[i][j] = (float) rand() / RAND_MAX;
[...]
26:    for (i=0; i<n; i++) {
27:       a[i] = (float) rand() / RAND_MAX;
[...]
39: int main (int argc, char *argv[]) {
40:    // VÃ©rification des arguments
41:    if (argc != 4) {
42:       fprintf (stderr, "Usage: %s <size> <nb warmup repets> <nb measure repets>\n", argv[0]);
43:       abort();
[...]
49:    unsigned size = atoi (argv[1]);
50: 
51:    // Nombre de repetition de warmup
52:    int repw = atoi (argv[2]);
53: 
54:    // Nombre de repetition de la mesure
55:    int repm = atoi (argv[3]);
56: 
57:    for (m=0; m<NB_METAS; m++) {
58:       // Allocation pour les 2 tableaux et la matrice
59:       float (*x) = malloc (size * sizeof x[0]);
60:       float (*y) = malloc (size * sizeof y[0]);
61:       float (*z)[size] = malloc (size * size * sizeof z[0][0]);
62: 
63:       // Initialisation des tableaux et de la matrice
64:       srand(0);
[...]
70:       if (m == 0) {
71:          for (i=0; i<repw; i++){
72:             baseline (size, x, y, z);
73:          }
74:       } else {
75:          baseline (size, x, y, z);
76:       }
77: 
78:       // Mesure des repetitions
79:       uint64_t t1 = rdtsc();
80:       for (i=0; i<repm; i++){
81:          baseline (size, x, y, z);
82:       }
83:       uint64_t t2 = rdtsc();
84: 
85:       // Affichage des performances
86:       printf ("%.2f cycles/innermost loop iter \n",(double)(t2 - t1) / ((double) size * size * repm));
87: 
88:       // Libere l'espace memoire
89:       free (x);
90:       free (y);
91:       free (z);
92:    }
93:    return EXIT_SUCCESS;
/usr/include/stdlib.h: 363 - 363
--------------------------------------------------------------------------------

363:   return (int) strtol (__nptr, (char **) NULL, 10);
