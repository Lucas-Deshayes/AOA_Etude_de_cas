Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] nbody.c(95,1)
  -> INLINE: (97,30) atoll(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (111,3) init(particle_t *, u64)
  -> INLINE: (126,7) move_particles(particle_t *, const f32, u64)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(25,3) inlined into nbody.c(111,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at nbody.c(52,3) inlined into nbody.c(126,7)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at nbody.c(82,9) inlined into nbody.c(126,7)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(121,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at nbody.c(25,3) inlined into nbody.c(111,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (29:21) and call:rand(void) (41:23)
LOOP END

LOOP BEGIN at nbody.c(53,3) inlined into nbody.c(126,7)
   remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(53,3) inlined into nbody.c(126,7)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7) inlined into nbody.c(126,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(82,9) inlined into nbody.c(126,7)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.c(82,9) inlined into nbody.c(126,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.c(82,9) inlined into nbody.c(126,7)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(95,1):remark #34051: REGISTER ALLOCATION : [main] nbody.c:95

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   49[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k2]
        
    Routine temporaries
        Total         :    1168
            Global    :     191
            Local     :     977
        Regenerable   :     189
        Spilled       :      14
        
    Routine stack
        Variables     :   1440208 bytes*
            Reads     :      29 [1.34e+00 ~ 1.3%]
            Writes    :      32 [1.71e+00 ~ 1.7%]
        Spills        :     152 bytes*
            Reads     :      42 [7.22e-01 ~ 0.7%]
            Writes    :      36 [3.05e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: move_particles(particle_t *, const f32, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (move_particles(particle_t *, const f32, u64)) [3] nbody.c(47,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(52,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at nbody.c(82,9)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(53,3)
   remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(62,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at nbody.c(62,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(53,3)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(62,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(62,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(82,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.c(82,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.c(82,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(47,1):remark #34051: REGISTER ALLOCATION : [move_particles] nbody.c:47

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   49[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k2]
        
    Routine temporaries
        Total         :     942
            Global    :     129
            Local     :     813
        Regenerable   :     100
        Spilled       :       4
        
    Routine stack
        Variables     :     152 bytes*
            Reads     :      22 [1.35e+00 ~ 1.4%]
            Writes    :      24 [1.72e+00 ~ 1.7%]
        Spills        :      72 bytes*
            Reads     :      23 [7.11e-01 ~ 0.7%]
            Writes    :      19 [3.28e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(particle_t *, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init(particle_t *, u64)) [4] nbody.c(24,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(25,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(25,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (29:21) and call:rand(void) (41:23)
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(24,1):remark #34051: REGISTER ALLOCATION : [init] nbody.c:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     131
            Global    :      35
            Local     :      96
        Regenerable   :      48
        Spilled       :       2
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       5 [0.00e+00 ~ 0.0%]
            Writes    :       7 [5.27e+00 ~ 5.3%]
        Spills        :      64 bytes*
            Reads     :      15 [5.48e+00 ~ 5.5%]
            Writes    :      14 [6.90e+00 ~ 6.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
